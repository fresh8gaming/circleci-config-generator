version: 2.1

executors:
  java:
    description: The docker container to run java commands
    docker:
      - image: whitesourcesoftware/ua-base:v2

references:
  workspace_root: &workspace_root /tmp/workspace

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

orbs:
  gcp-gcr: circleci/gcp-gcr@0.16.1
  docker: circleci/docker@2.5

jobs:
  test-and-lint:
    docker:
      - image: cimg/go:{{ .GoVersion }}
    steps:
      - checkout
      - run: make install-tools
      - run: make test
      - run: make lint

  buf-lint:
    docker:
      - image: cimg/go:{{ .GoVersion }}
    steps:
      - checkout
      - run: make install-tools
      - run: make buf-lint

  build-and-push-image:
    parameters:
      extra_build_args:
        default: ""
        description: >
          Extra flags to pass to docker build. For examples, see
          https://docs.docker.com/engine/reference/commandline/build
        type: string
      image:
        description: A name for your Docker image
        type: string
      path:
        default: .
        description: >
          Path to the directory containing your Dockerfile, defaults to . (working
          directory)
        type: string
      dockerfile-name:
        default: Dockerfile
        description: The name of the Dockerfile to build.
        type: string
      registry-url:
        default: europe-docker.pkg.dev
        description: The GAR URL
        type: string
      registry-name:
        default: main
        description: the GAR name
        type: string
      service_name:
        description: Name of the service
        type: string
      tag:
        default: latest
        description: A Docker image tag
        type: string
    steps:
      - checkout
      - gcp-gcr/gcr-auth:
          gcloud-service-key: GCLOUD_SERVICE_KEY
          google-compute-zone: GOOGLE_COMPUTE_ZONE
          google-project-id: GOOGLE_PROJECT_ID
          registry-url: <<parameters.registry-url>>
      - gcp-gcr/build-image:
          docker-context: .
          dockerfile: build/<<parameters.dockerfile-name>>
          google-project-id: GOOGLE_PROJECT_ID
          no_output_timeout: 20m
          extra_build_args: <<parameters.extra_build_args>>
          image: <<parameters.registry-name>>/<<parameters.image>>
          path: <<parameters.path>>
          registry-url: <<parameters.registry-url>>
          tag: <<parameters.tag>>
          workspace-root: .
      - gcp-gcr/push-image:
          google-project-id: GOOGLE_PROJECT_ID
          image: <<parameters.registry-name>>/<<parameters.image>>
          registry-url: <<parameters.registry-url>>
          tag: ${CIRCLE_SHA1}
      - gcp-gcr/tag-image:
          google-project-id: GOOGLE_PROJECT_ID
          image: <<parameters.registry-name>>/<<parameters.image>>
          registry-url: <<parameters.registry-url>>
          source-tag: <<parameters.tag>>
          target-tag: latest
      - run: mkdir /tmp/workspace
      - run: echo "-p <<parameters.service_name>>.docker.tag=$CIRCLE_SHA1" > /tmp/workspace/<<parameters.image>>
      - run: cat /tmp/workspace/<<parameters.image>>
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - <<parameters.image>>

  concat-versions:
    docker:
      - image: cimg/base:2023.10
    steps:
      - *attach_workspace
      - run: cat /tmp/workspace/* | tr "\n" " " > /tmp/workspace/merged-versions
      - run: cat /tmp/workspace/merged-versions
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - merged-versions

  update-argo:
    parameters:
      argo-cd-project:
        type: string
    docker:
      - image: cimg/base:2023.10
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: "Fetch argocd server version"
          command: "curl -sSL -o ./argocd-server-version.json https://${ARGOCD_SERVER}/api/version"
      - restore_cache:
          keys:
            - argocd-cli-{{"{{"}} checksum "argocd-server-version.json" {{"}}"}}
      - run:
          name: "Fetch argocd cli"
          command: |
            FILE=./argocd
            if test -f "$FILE"; then
              echo "argocd cache hit, skipping"
            else
              curl -sSL -o ./argocd https://${ARGOCD_SERVER}/download/argocd-linux-amd64 && chmod +x ./argocd
            fi
      - save_cache:
          key: argocd-cli-{{"{{"}} checksum "argocd-server-version.json" {{"}}"}}
          paths:
            - argocd
      - run:
          name: "Set Image Tag"
          command: |
            for project in <<parameters.argo-cd-project>>; do
              ./argocd app set $project $(cat /tmp/workspace/merged-versions) --grpc-web --auth-token=$ARGO_AUTH_TOKEN
            done
      - run:
          name: "Sync"
          command: "./argocd app sync <<parameters.argo-cd-project>> --grpc-web --auth-token=$ARGO_AUTH_TOKEN"

  kube-score:
    parameters:
      version:
        type: string
        default: 1.14.0
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run: 
          name: Download helm to template charts
          command: "curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && chmod 700 get_helm.sh && ./get_helm.sh"
      - run:
          name: Download kube-score
          command:  "curl -sSL -o ./kube-score https://github.com/zegl/kube-score/releases/download/v<<parameters.version>>/kube-score_<<parameters.version>>_linux_amd64 && chmod +x ./kube-score"
      - run:
          name: Scan charts
          command: "cat ./deploy/chart/values-production/*.yaml > ./values-production.yaml && helm template -n {{ .Name }} {{ .Name }} --values ./deploy/chart/values.yaml --values ./values-production.yaml ./deploy/chart |./kube-score score --ignore-test container-image-tag --ignore-test horizontalpodautoscaler-has-target - || true"

  scan:
    executor: java
    parameters:
      api_key:
        description: Unique identifier of the organization. Can be retrieved from the admin page in your WhiteSource account.
        type: string
        default: "${API_KEY}"
      directory:
        description: Comma separated list of directories and / or files to scan.
        type: string
        default: "."
      config_file_path:
        description: Configuration file name (including file path).
        type: string
        default: "whitesource-fs-agent.config"
      commands_file_path:
        description: install commands file (including file path) 
        type: string
        default: "install_commands.sh"
    steps:
      - checkout
      - run:
          command: |
            export WS_SCANCOMMENT="Repository: $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME"
            if [[ -z "<< parameters.api_key >>" ]]; then
              echo "API_KEY has not been set, please set it up in the project environment variables since its mandatory"
              exit 1
            else
                if [[ -f << parameters.commands_file_path >> ]]
                then
                    echo "Executing file: install_commands.sh"
                    echo ""
                    chmod +x << parameters.commands_file_path >>
                    ./<< parameters.commands_file_path >>
                fi
                  bash <(curl -s -L https://raw.githubusercontent.com/whitesource/unified-agent-distribution/master/standAlone/wss_agent_orb.sh) -apiKey << parameters.api_key >> -c << parameters.config_file_path >> -d << parameters.directory >>
            fi

workflows:
  version: 2
{{- if not .DisableWhitesource}}
  mend:
    jobs:
      - scan:
          config_file_path: .circleci/.whitesource
          commands_file_path: .circleci/.whitesource_setup.sh
          context:
            - whitesource
            - whitesource-{{ .Team }}
            - go{{ .GoVersion }}
{{- end}}
{{ if .ChangedServices }}
  deploy-changed:
    jobs:
      - test-and-lint
{{if $.HasGRPC}}
      - buf-lint
{{- end}}
{{if $.KubescoreEnabled}}
      - kube-score
{{- end}}
      - docker/hadolint:
          dockerfiles: "build/Dockerfile"
          hadolint-tag: 2.12.0-debian
{{range .ChangedServices -}}
  {{if .CIEnabled}}
      - build-and-push-image:
          name: build-and-push-{{ .Name }}
          dockerfile-name: {{ .Dockerfile }}
          image: {{ $.Name }}-{{ .Name }}
          service_name: {{ .NameUnderscored }}
          tag: ${CIRCLE_SHA1}
          extra_build_args: "--build-arg APP={{ .Name }}{{ $.ArgOverrides }}"
          context:
            - artifact-registry
          requires:
            - test-and-lint
            - docker/hadolint
    {{if $.HasGRPC}}
            - buf-lint
    {{- end}}
  {{end}}
{{- end}}
{{- end}}

{{if .ChangedServices}}
  {{ if $.NeedsApproval }}
      - approve-production:
          type: approval
          filters:
            branches:
              only:
                - trunk
    {{- if .Staging }}
      - approve-staging:
          type: approval
          filters:
            branches:
              only:
                - trunk
    {{ end }}
  {{ end }}

  {{- if .Staging }}
      - update-argo:
          name: update-staging-argo
          argo-cd-project: {{if .ArgoAppNamesStaging }}{{ .ArgoAppNamesStaging }}{{else}}{{.Name}}-staging{{end}}
          context:
            - argo
          requires:
            - concat-versions
  {{- end }}
      - concat-versions:
          name: concat-versions
          requires:
  {{range .ChangedServices }}
            - build-and-push-{{ .Name }}
  {{ end}}
  {{- if .Staging }}
    {{ if not $.CDEnabled }}
            - approve-staging
    {{ end }}
  {{- end }}
      - update-argo:
          name: update-production-argo
          argo-cd-project: {{if .ArgoAppNamesProduction }}{{ .ArgoAppNamesProduction }}{{else}}{{.Name}}{{end}}
          context:
            - argo
          requires:
            - concat-versions
  {{range .ChangedServices }}
            - build-and-push-{{ .Name }}
  {{ end}}
  {{ if $.NeedsApproval }}
            - approve-production
  {{ end }}
  {{- if .Staging }}
            - update-staging-argo
  {{- end }}
          filters:
            branches:
              only:
                - trunk
{{ end }}

  deploy-all:
    jobs:
      - approve-trigger-all-builds:
          type: approval
          filters:
            branches:
              only:
                - trunk
      - test-and-lint:
          requires:
            - approve-trigger-all-builds
{{if $.HasGRPC}}
      - buf-lint:
          requires:
            - approve-trigger-all-builds
{{- end}}
{{if $.KubescoreEnabled}}
      - kube-score:
          requires:
            - approve-trigger-all-builds
{{- end}}
      - docker/hadolint:
          dockerfiles: "build/Dockerfile"
          hadolint-tag: 2.12.0-debian
          requires:
            - approve-trigger-all-builds
{{range .Services -}}
  {{if .CIEnabled}}
      - build-and-push-image:
          name: all-builds-build-and-push-{{ .Name }}
          image: {{ $.Name }}-{{ .Name }}
          service_name: {{ .NameUnderscored }}
          dockerfile-name: {{ .Dockerfile }}
          tag: ${CIRCLE_SHA1}
          extra_build_args: "--build-arg APP={{ .Name }}{{ $.ArgOverrides }}"
          context:
            - artifact-registry
          requires:
            - test-and-lint
            - docker/hadolint
    {{if $.HasGRPC}}
            - buf-lint
    {{- end}}
  {{end}}
{{- end}}
      - concat-versions:
          name: concat-versions-all-builds
          requires:
{{range .Services -}}
  {{if .CIEnabled}}
            - all-builds-build-and-push-{{ .Name }}
  {{end}}
{{- end}}
      - approve-all-builds-production:
          type: approval
          filters:
            branches:
              only:
                - trunk

      - update-argo:
          name: update-argo-all-builds-production
          argo-cd-project: {{if .ArgoAppNamesProduction }}{{ .ArgoAppNamesProduction }}{{else}}{{.Name}}{{end}}
          context:
            - argo
          requires:
            - concat-versions-all-builds
{{ if .Staging}}
            - update-argo-all-builds-staging
            - approve-all-builds-production

{{end}}

{{ if .Staging}}
      - approve-all-builds-staging:
          type: approval
          filters:
            branches:
              only:
                - trunk

      - update-argo:
          name: update-argo-all-builds-staging
          argo-cd-project: {{if .ArgoAppNamesStaging }}{{ .ArgoAppNamesStaging }}{{else}}{{.Name}}-staging{{end}}
          context:
            - argo
          requires:
            - concat-versions-all-builds
            - approve-all-builds-staging
{{end}}