version: 2.1

executors:
  gcp-default:
    description: A debian-based machine executor
    machine:
      image: ubuntu-2004:202010-01

orbs:
  gcp-gcr: circleci/gcp-gcr@0.14.1
  slack: circleci/slack@3.4.2
  docker: circleci/docker@1.5.0
  whitesource-scan: whitesource/whitesource-scan@21.6.3

jobs:
  test-and-lint:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout
      - run: make install-tools
      - run: make test
      - run: make lint

  buf-lint:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout
      - run: make install-tools
      - run: make buf-lint

  build-and-push-image:
    executor: gcp-default
    parameters:
      extra_build_args:
        default: ""
        description: >
          Extra flags to pass to docker build. For examples, see
          https://docs.docker.com/engine/reference/commandline/build
        type: string
      image:
        description: A name for your Docker image
        type: string
      path:
        default: .
        description: >
          Path to the directory containing your Dockerfile, defaults to . (working
          directory)
        type: string
      registry-url:
        default: europe-docker.pkg.dev
        description: The GAR URL
        type: string
      registry-name:
        default: main
        description: the GAR name
        type: string
      service_name:
        description: Name of the service
        type: string
      tag:
        default: latest
        description: A Docker image tag
        type: string
    steps:
      - checkout
      - gcp-gcr/gcr-auth:
          gcloud-service-key: GCLOUD_SERVICE_KEY
          google-compute-zone: GOOGLE_COMPUTE_ZONE
          google-project-id: GOOGLE_PROJECT_ID
          registry-url: <<parameters.registry-url>>
      - gcp-gcr/build-image:
          docker-context: .
          dockerfile: build/Dockerfile
          google-project-id: GOOGLE_PROJECT_ID
          extra_build_args: <<parameters.extra_build_args>>
          image: <<parameters.registry-name>>/<<parameters.image>>
          path: <<parameters.path>>
          registry-url: <<parameters.registry-url>>
          tag: <<parameters.tag>>
          workspace-root: .
      - gcp-gcr/push-image:
          google-project-id: GOOGLE_PROJECT_ID
          image: <<parameters.registry-name>>/<<parameters.image>>
          registry-url: <<parameters.registry-url>>
          tag: ${CIRCLE_SHA1}
      - gcp-gcr/tag-image:
          google-project-id: GOOGLE_PROJECT_ID
          image: <<parameters.registry-name>>/<<parameters.image>>
          registry-url: <<parameters.registry-url>>
          source-tag: <<parameters.tag>>
          target-tag: latest
      - run: mkdir /tmp/workspace
      - run: echo "-p <<parameters.service_name>>.docker.tag=$CIRCLE_SHA1" > /tmp/workspace/<<parameters.image>>
      - run: cat /tmp/workspace/<<parameters.image>>
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - <<parameters.image>>

  concat-versions:
    docker:
      - image: cimg/base:2021.10
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: cat /tmp/workspace/* | tr "\n" " " > /tmp/workspace/merged-versions
      - run: cat /tmp/workspace/merged-versions
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - merged-versions

  update-argo:
    parameters:
      argo-cd-project:
        type: string
    docker:
      - image: cimg/base:2021.10
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: "Fetch argocd cli"
          command: "curl -sSL -o ./argocd https://${ARGOCD_SERVER}/download/argocd-linux-amd64 && chmod +x ./argocd"
      - run:
          name: "Set Image Tag"
          command: "./argocd app set <<parameters.argo-cd-project>> $(cat /tmp/workspace/merged-versions) --grpc-web --auth-token=$ARGO_AUTH_TOKEN"
      - run:
          name: "Sync"
          command: "./argocd app sync <<parameters.argo-cd-project>> --grpc-web --auth-token=$ARGO_AUTH_TOKEN"

workflows:
  version: 2
{{- if .WhitesourceEnabled}}
  whitesource:
    jobs:
      - whitesource-scan/scan:
          config_file_path: .circleci/.whitesource
          commands_file_path: .circleci/.whitesource_setup.sh
          context:
            - whitesource
            - whitesource-{{ .Team }}
            - go117
  {{- end}}
  main:
    jobs:
      - test-and-lint
{{if $.HasGRPC}}
      - buf-lint
{{- end}}
      - docker/hadolint:
          dockerfiles: "build/Dockerfile"
{{range .Services -}}
{{if .CIEnabled}}
      - build-and-push-image:
          name: build-and-push-{{ .Name }}
          image: {{ $.Name }}-{{ .Name }}
          service_name: {{ .NameUnderscored }}
          tag: ${CIRCLE_SHA1}
          extra_build_args: "--build-arg APP={{ .Name }}"
          context:
            - artifact-registry
          requires:
            - test-and-lint
            - docker/hadolint
{{if eq .Type "http-grpc"}}
            - buf-lint
{{- end}}
{{end}}
{{- end}}
      - concat-versions:
          requires:
{{range .Services -}}
{{if .CIEnabled}}
            - build-and-push-{{ .Name }}
{{end}}
{{- end}}
{{- if .StagingName }}
      - approve-staging:
          type: approval
          filters:
            branches:
              only:
                - trunk
      - update-argo:
          name: update-staging-argo
          argo-cd-project: {{.StagingName }}
          context:
            - argo
          requires:
            - concat-versions
            - approve-staging
{{- end }}
      - approve:
          type: approval
          filters:
            branches:
              only:
                - trunk
      - update-argo:
          argo-cd-project: {{ .Name }}
          context:
            - argo
          requires:
            - concat-versions
            - approve
  {{- if .StagingName }}
            - update-staging-argo
  {{- end }}
          filters:
            branches:
              only:
                - trunk
